type Query {
  hello(name: String!): String!
  job(key: JobKey!): Job!
  jobs: [Job!]!
  logs: [Log!]!
  me: User
  version: String!
}

type Mutation {
  cancelJob(key: JobKey!): Job!
  createLog(input: LogInput!): Log!
  runJob(key: JobKey!): Job!
}


type Subscription {
  countdown(from: Int!): Int!
}

type User {
  id: ID!
  createdAt: Date!
  email: String!
  nameFirst: String!
  nameLast: String!
  roleKeys: [RoleKey!]!
}

type Log {
  id: ID!
  createdAt: Date!
  message: String!
  payload: JsonPrisma
  type: LogType!
}

type Job {
  id: ID!
  canceledAt: Date
  failedAt: Date
  finishedAt: Date
  key: JobKey!
  name: String!
  startedAt: Date!
}

input LogInput {
  message: String!
  payload: JsonPrisma
  type: LogType!
}

scalar Date

scalar JSON

scalar JsonPrisma

enum RoleKey {
  Admin
}

enum JobKey {
  InvalidateStaleTokens
}

enum LogType {
  Debug
  Error
  Info
  Log
  Warn
}

fragment JobFragment on Job {
  id
  key
  name
  canceledAt
  failedAt
  finishedAt
  startedAt
}

fragment LogFragment on Log {
  id
  createdAt
  message
  payload
  type
}
