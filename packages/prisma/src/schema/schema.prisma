generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://user:password@db:5432/postgres"
}

model Job {
  id      Int      @id @default(autoincrement())
  key     JobKey   @unique
  name    String
  ranJobs RanJob[]
}

model RanJob {
  id         Int       @id @default(autoincrement())
  ranAt      DateTime
  failedAt   DateTime?
  finishedAt DateTime?
  jobId      Int
  job        Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model Role {
  id        Int        @id @default(autoincrement())
  key       RoleKey    @unique
  name      String
  userRoles UserRole[]
}

model UserRole {
  @@id([userId, roleId])
  userId Int
  roleId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role @relation(fields: [roleId], references: [id])
}

model User {
  id           Int                   @id @default(autoincrement())
  createdAt    DateTime              @default(now())
  email        String                @unique
  nameFirst    String
  nameLast     String
  password     String
  roles        UserRole[]
  accessTokens AccessToken[]
}

model AccessToken {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  value          String       @unique
  userId         Int
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  refreshTokenId Int          @unique
  refreshToken   RefreshToken @relation(fields: [refreshTokenId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  value       String       @unique
  accessToken AccessToken?
}

enum RoleKey {
  Admin
}

enum JobKey {
  InvalidateStaleTokens
}
